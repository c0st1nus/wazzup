//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "clients")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub full_name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub phone: Option<String>,
    pub wazzup_chat: Option<String>,
    pub responsible_user_id: Option<i64>,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bookings::Entity")]
    Bookings,
    #[sea_orm(has_many = "super::client_tag_assignments::Entity")]
    ClientTagAssignments,
    #[sea_orm(has_many = "super::projects::Entity")]
    Projects,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::ResponsibleUserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
    #[sea_orm(
        belongs_to = "super::wazzup_chats::Entity",
        from = "Column::WazzupChat",
        to = "super::wazzup_chats::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    WazzupChats,
}

impl Related<super::bookings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bookings.def()
    }
}

impl Related<super::client_tag_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ClientTagAssignments.def()
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::wazzup_chats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WazzupChats.def()
    }
}

impl Related<super::client_tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::client_tag_assignments::Relation::ClientTags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::client_tag_assignments::Relation::Clients.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
