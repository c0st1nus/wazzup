//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "bookings")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(unique)]
    pub code: String,
    pub service_id: i64,
    pub client_id: i64,
    pub start_datetime: DateTimeWithTimeZone,
    pub end_datetime: DateTimeWithTimeZone,
    pub status: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::booking_resources::Entity")]
    BookingResources,
    #[sea_orm(
        belongs_to = "super::clients::Entity",
        from = "Column::ClientId",
        to = "super::clients::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Clients,
    #[sea_orm(
        belongs_to = "super::services::Entity",
        from = "Column::ServiceId",
        to = "super::services::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Services,
}

impl Related<super::booking_resources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BookingResources.def()
    }
}

impl Related<super::clients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clients.def()
    }
}

impl Related<super::services::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Services.def()
    }
}

impl Related<super::resources::Entity> for Entity {
    fn to() -> RelationDef {
        super::booking_resources::Relation::Resources.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::booking_resources::Relation::Bookings.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
