//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "availability_exceptions")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub resource_id: i64,
    pub start_datetime: DateTimeWithTimeZone,
    pub end_datetime: DateTimeWithTimeZone,
    pub r#type: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub reason: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::resources::Entity",
        from = "Column::ResourceId",
        to = "super::resources::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Resources,
}

impl Related<super::resources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Resources.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
