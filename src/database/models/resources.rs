//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "resources")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Binary(16)")]
    pub id: Vec<u8>,
    pub name: String,
    pub r#type: String,
    #[sea_orm(column_type = "Binary(16)", nullable)]
    pub role_id: Option<Vec<u8>>,
    #[sea_orm(column_type = "Binary(16)", nullable)]
    pub company_id: Option<Vec<u8>>,
    pub quantity: i32,
    pub image_path: Option<String>,
    pub created_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::availability_exceptions::Entity")]
    AvailabilityExceptions,
    #[sea_orm(has_many = "super::booking_resources::Entity")]
    BookingResources,
    #[sea_orm(
        belongs_to = "super::companies::Entity",
        from = "Column::CompanyId",
        to = "super::companies::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Companies,
    #[sea_orm(
        belongs_to = "super::resource_roles::Entity",
        from = "Column::RoleId",
        to = "super::resource_roles::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ResourceRoles,
    #[sea_orm(has_many = "super::schedule_templates::Entity")]
    ScheduleTemplates,
    #[sea_orm(has_many = "super::users::Entity")]
    Users,
}

impl Related<super::availability_exceptions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AvailabilityExceptions.def()
    }
}

impl Related<super::booking_resources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BookingResources.def()
    }
}

impl Related<super::companies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Companies.def()
    }
}

impl Related<super::resource_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ResourceRoles.def()
    }
}

impl Related<super::schedule_templates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScheduleTemplates.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::bookings::Entity> for Entity {
    fn to() -> RelationDef {
        super::booking_resources::Relation::Bookings.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::booking_resources::Relation::Resources.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
