//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tasks")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Binary(16)")]
    pub id: Vec<u8>,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Binary(16)")]
    pub project_id: Vec<u8>,
    #[sea_orm(column_type = "Binary(16)", nullable)]
    pub parent_task_id: Option<Vec<u8>>,
    pub created_at: DateTimeUtc,
    pub content: Option<Json>,
    #[sea_orm(column_type = "Binary(16)")]
    pub status_id: Vec<u8>,
    #[sea_orm(column_type = "Binary(16)", nullable)]
    pub previous_task_id: Option<Vec<u8>>,
    pub route: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::projects::Entity",
        from = "Column::ProjectId",
        to = "super::projects::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Projects,
    #[sea_orm(has_many = "super::task_assignments::Entity")]
    TaskAssignments,
    #[sea_orm(
        belongs_to = "super::task_statuses::Entity",
        from = "Column::StatusId",
        to = "super::task_statuses::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TaskStatuses,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentTaskId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef2,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::PreviousTaskId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef1,
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl Related<super::task_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TaskAssignments.def()
    }
}

impl Related<super::task_statuses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TaskStatuses.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
