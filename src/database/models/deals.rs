//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "deals")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Binary(16)")]
    pub id: Vec<u8>,
    pub deal_status: Option<String>,
    pub name: String,
    pub description: Option<Json>,
    pub source_chat_id: Option<String>,
    #[sea_orm(column_type = "Binary(16)", nullable)]
    pub assignee_id: Option<Vec<u8>>,
    #[sea_orm(column_type = "Binary(16)", nullable)]
    pub resulting_project_id: Option<Vec<u8>>,
    #[sea_orm(column_type = "Binary(16)", nullable)]
    pub previous_deal_id: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::chats::Entity",
        from = "Column::SourceChatId",
        to = "super::chats::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chats,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::PreviousDealId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::projects::Entity",
        from = "Column::ResultingProjectId",
        to = "super::projects::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Projects,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::AssigneeId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::chats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chats.def()
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
