//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Binary(16)")]
    pub id: Vec<u8>,
    pub name: Option<String>,
    #[sea_orm(unique)]
    pub login: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    pub role: Option<String>,
    #[sea_orm(column_type = "Binary(16)", nullable)]
    pub resource_id: Option<Vec<u8>>,
    pub bot_hook: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::channel_settings::Entity")]
    ChannelSettings,
    #[sea_orm(has_many = "super::clients::Entity")]
    Clients,
    #[sea_orm(has_many = "super::company_users::Entity")]
    CompanyUsers,
    #[sea_orm(has_many = "super::contacts::Entity")]
    Contacts,
    #[sea_orm(has_many = "super::messages::Entity")]
    Messages,
    #[sea_orm(
        belongs_to = "super::resources::Entity",
        from = "Column::ResourceId",
        to = "super::resources::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Resources,
    #[sea_orm(has_many = "super::task_assignments::Entity")]
    TaskAssignments,
    #[sea_orm(has_many = "super::tokens::Entity")]
    Tokens,
}

impl Related<super::channel_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChannelSettings.def()
    }
}

impl Related<super::clients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clients.def()
    }
}

impl Related<super::company_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CompanyUsers.def()
    }
}

impl Related<super::contacts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Contacts.def()
    }
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Messages.def()
    }
}

impl Related<super::resources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Resources.def()
    }
}

impl Related<super::task_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TaskAssignments.def()
    }
}

impl Related<super::tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tokens.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
