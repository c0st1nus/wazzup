//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, ToSchema)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub name: String,
    #[sea_orm(unique)]
    pub login: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password_hash: String,
    pub salt: String,
    pub role: String,
    pub resource_id: Option<i64>,
    pub location_id: Option<i64>,
    #[schema(value_type = String, format = DateTime)]
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::clients::Entity")]
    Clients,
    #[sea_orm(
        belongs_to = "super::locations::Entity",
        from = "Column::LocationId",
        to = "super::locations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Locations,
    #[sea_orm(
        belongs_to = "super::resources::Entity",
        from = "Column::ResourceId",
        to = "super::resources::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Resources,
    #[sea_orm(has_many = "super::task_assignments::Entity")]
    TaskAssignments,
    #[sea_orm(has_many = "super::tokens::Entity")]
    Tokens,
}

impl Related<super::clients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clients.def()
    }
}

impl Related<super::locations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Locations.def()
    }
}

impl Related<super::resources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Resources.def()
    }
}

impl Related<super::task_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TaskAssignments.def()
    }
}

impl Related<super::tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tokens.def()
    }
}

impl Related<super::tasks::Entity> for Entity {
    fn to() -> RelationDef {
        super::task_assignments::Relation::Tasks.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::task_assignments::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
